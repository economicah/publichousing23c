# generate dataset of max salary for each PHA
# this contributes to "Professional-looking software engineering (#10)"
salaries_max <- salaries %>% group_by(PHA.Code) %>% top_n(1, Total.Compensation) %>%
distinct(salaries, PHA.Code, Total.Compensation, .keep_all = TRUE)
# recode missing compensation data as NA rather than 0
salaries_max$Total.Compensation[salaries_max$Total.Compensation == 0] <- NA
#mean(salaries_max$Total.Compensation,na.rm = TRUE); min(salaries_max$Total.Compensation,na.rm = TRUE); max(salaries_max$Total.Compensation,na.rm = TRUE)
#dummy variable for "received bonus"
salaries_max <- mutate(salaries_max, receive_bonus = Bonus > 0)
salaries_max$receive_bonus[is.na(salaries_max$Total.Compensation)] <- NA
# keep only "Total Comp", "PHA Code", and dummy for "received bonus"
salaries_max <- select(salaries_max, Total.Compensation, code = PHA.Code, receive_bonus)
# add max salary data to HCV data frame
hcv <- left_join(hcv, salaries_max, by = "code")
#------------------------------------------------------------
#          Create Variables
#------------------------------------------------------------
# the census bureau designates census tracts with a poverty rate >=20% as "poverty areas"
hcv <- mutate(hcv, poverty_area = tpoverty >=20)
#head(hcv$poverty_area,hcv$tpoverty)
# add number of client households as a new variable
hcv <- mutate(hcv, num_hh = total_units * (pct_occupied/100))
#sum(hcv$num_hh, na.rm = TRUE)
# add number of female-headed households as a new variable
hcv <- mutate(hcv, num_fem = total_units * (pct_occupied/100) * (pct_female_head/100))
# add number of female-headed (with children) households as a new variable
hcv <- mutate(hcv, num_mother = total_units * (pct_occupied/100) * (pct_female_head_child/100))
# add number of male-headed households as a new variable
hcv <- mutate(hcv, num_male = total_units * (pct_occupied/100) * (1-(pct_female_head/100)))
# add total_rent as a new variable
hcv <- mutate(hcv, total_rent  = rent_per_month + spending_per_month)
#mean(hcv$total_rent, na.rm = TRUE);min(hcv$total_rent, na.rm = TRUE);max(hcv$total_rent, na.rm = TRUE)
# add monthly income as a new variable
hcv <- mutate(hcv, income_monthly  = hh_income/12)
#mean(hcv$income_monthly, na.rm = TRUE);min(hcv$income_monthly, na.rm = TRUE);max(hcv$income_monthly, na.rm = TRUE)
# add rent_burden as a new variable (total rent/monthly income)
hcv <- mutate(hcv, rent_burden  = total_rent/income_monthly)
#mean(hcv$rent_burden, na.rm = TRUE);min(hcv$rent_burden, na.rm = TRUE);max(hcv$rent_burden, na.rm = TRUE)
#-------------------------------------------------------------
# *************************GRAPHICS***************************
#-------------------------------------------------------------
#------------------------------------------------------------
#      BARPLOT (Reqd Graphical Displays #1)
#------------------------------------------------------------
# create data frame with total number of female heads of households and male head of households
# by census region
hcv_collapse <- summaryBy(num_male+num_fem+num_mother~region,data=hcv,FUN=sum,na.rm=TRUE)
hcv_collapse <- mutate(hcv_collapse, num_nonmother  = num_fem.sum-num_mother.sum)
hcv_collapse <- select(hcv_collapse, region,num_male.sum, num_nonmother,num_mother.sum)
# melt that data frame
hcv_collapse_melt <-melt(hcv_collapse,id.var="region")
# create stacked barplot of heads of households by region
ggplot(data = hcv_collapse_melt, aes(x = reorder(region, -value), y = value,
fill = factor(variable))) + geom_bar(stat="identity") + theme_bw() + labs(x="Region")  +
ggtitle("Households Receiving Subsidized Housing\n by Region") +
scale_y_continuous(name="Count",labels=scales::comma) +
theme(legend.position="bottom",legend.direction = "horizontal", legend.title=element_blank()) +
scale_fill_manual(values=c("lightsalmon","mediumorchid3", "mediumorchid4"),
labels=c("Headed\n by a Man", "Headed by a\n Woman, No Children","Headed by a\n Woman with Children")) +
theme(plot.title = element_text(hjust = 0.5))
# create stacked barplot of heads of households by region
ggplot(data = hcv_collapse_melt, aes(x = reorder(region, -value), y = value,
fill = factor(variable))) + geom_bar(stat="identity") + theme_bw() + labs(x="Region")  +
ggtitle("Households Receiving Subsidized Housing\n by Region") +
scale_y_continuous(name="Count",labels=scales::comma) +
theme(legend.position="bottom",legend.direction = "horizontal", legend.title=element_blank()) +
scale_fill_manual(values=c("mediumseagreen", "lightsalmon","mediumorchid3"),
labels=c("Headed\n by a Man", "Headed by a\n Woman, No Children","Headed by a\n Woman with Children")) +
theme(plot.title = element_text(hjust = 0.5))
# create stacked barplot of heads of households by region
ggplot(data = hcv_collapse_melt, aes(x = reorder(region, -value), y = value,
fill = factor(variable))) + geom_bar(stat="identity") + theme_bw() + labs(x="Region")  +
ggtitle("Households Receiving Subsidized Housing\n by Region") +
scale_y_continuous(name="Count",labels=scales::comma) +
theme(legend.position="bottom",legend.direction = "horizontal", legend.title=element_blank()) +
scale_fill_manual(values=c("mediumseagreen", "lightsalmon","lightorchid"),
labels=c("Headed\n by a Man", "Headed by a\n Woman, No Children","Headed by a\n Woman with Children")) +
theme(plot.title = element_text(hjust = 0.5))
# create stacked barplot of heads of households by region
ggplot(data = hcv_collapse_melt, aes(x = reorder(region, -value), y = value,
fill = factor(variable))) + geom_bar(stat="identity") + theme_bw() + labs(x="Region")  +
ggtitle("Households Receiving Subsidized Housing\n by Region") +
scale_y_continuous(name="Count",labels=scales::comma) +
theme(legend.position="bottom",legend.direction = "horizontal", legend.title=element_blank()) +
scale_fill_manual(values=c("mediumseagreen", "lightsalmon","lightorchid1"),
labels=c("Headed\n by a Man", "Headed by a\n Woman, No Children","Headed by a\n Woman with Children")) +
theme(plot.title = element_text(hjust = 0.5))
# create stacked barplot of heads of households by region
ggplot(data = hcv_collapse_melt, aes(x = reorder(region, -value), y = value,
fill = factor(variable))) + geom_bar(stat="identity") + theme_bw() + labs(x="Region")  +
ggtitle("Households Receiving Subsidized Housing\n by Region") +
scale_y_continuous(name="Count",labels=scales::comma) +
theme(legend.position="bottom",legend.direction = "horizontal", legend.title=element_blank()) +
scale_fill_manual(values=c("mediumseagreen", "lightsalmon","orchid"),
labels=c("Headed\n by a Man", "Headed by a\n Woman, No Children","Headed by a\n Woman with Children")) +
theme(plot.title = element_text(hjust = 0.5))
# create stacked barplot of heads of households by region
ggplot(data = hcv_collapse_melt, aes(x = reorder(region, -value), y = value,
fill = factor(variable))) + geom_bar(stat="identity") + theme_bw() + labs(x="Region")  +
ggtitle("Households Receiving Subsidized Housing\n by Region") +
scale_y_continuous(name="Count",labels=scales::comma) +
theme(legend.position="bottom",legend.direction = "horizontal", legend.title=element_blank()) +
scale_fill_manual(values=c("mediumseagreen", "salmon","orchid"),
labels=c("Headed\n by a Man", "Headed by a\n Woman, No Children","Headed by a\n Woman with Children")) +
theme(plot.title = element_text(hjust = 0.5))
# create stacked barplot of heads of households by region
ggplot(data = hcv_collapse_melt, aes(x = reorder(region, -value), y = value,
fill = factor(variable))) + geom_bar(stat="identity") + theme_bw() + labs(x="Region")  +
ggtitle("Households Receiving Subsidized Housing\n by Region") +
scale_y_continuous(name="Count",labels=scales::comma) +
theme(legend.position="bottom",legend.direction = "horizontal", legend.title=element_blank()) +
scale_fill_manual(values=c("mediumseagreen", "lightsalmon1","orchid"),
labels=c("Headed\n by a Man", "Headed by a\n Woman, No Children","Headed by a\n Woman with Children")) +
theme(plot.title = element_text(hjust = 0.5))
View(hcv)
View(hcv)
knitr::opts_chunk$set(echo = TRUE)
#NOTE TO USER: CHANGE TWO FILE PATHS (line 29 and 44) BEFORE PROCEEDING
if (!require(reshape2)) install.packages("reshape2",dependencies=TRUE)
if (!require(doBy)) install.packages("doBy",dependencies=TRUE)
if (!require(ggplot2)) install.packages("ggplot2",dependencies=TRUE)
if (!require(dplyr)) install.packages("dplyr",dependencies=TRUE)
if (!require(noncensus)) install.packages("noncensus",dependencies=TRUE)
if (!require(tidyr)) install.packages("tidyr",dependencies=TRUE)
require(reshape2)
require(doBy)
require(ggplot2)
require(dplyr)
require(noncensus)
require(tidyr)
pha <- read.csv("~/Desktop/Term project/PHA_2014.csv"); head(pha)
pha[pha == -1] <- NA
pha[pha == -4] <- NA
pha[pha == -5] <- NA
hcv <- filter(pha, pha$program == 3)
data(states)
states_fin <- states[, c(1, 3, 4)]
hcv <- left_join(hcv, states_fin, by = "state")
hcv$region <- as.character(hcv$region)
hcv$region[is.na(hcv$region)] <- "Island"
hcv$region <- as.factor(hcv$region)
table(hcv$region)
salaries <- read.csv("~/Desktop/Term project/2014EXEC_COMP.csv"); head(salaries)
strip_dol <- function(x) as.numeric((gsub("\\,", "", gsub("\\$", "", x))))
colnames(salaries)
salaries[,4:10] <- sapply(salaries[,4:10], strip_dol)
salaries_max <- salaries %>% group_by(PHA.Code) %>% top_n(1, Total.Compensation) %>%
distinct(salaries, PHA.Code, Total.Compensation, .keep_all = TRUE)
salaries_max$Total.Compensation[salaries_max$Total.Compensation == 0] <- NA
salaries_max <- mutate(salaries_max, receive_bonus = Bonus > 0)
salaries_max$receive_bonus[is.na(salaries_max$Total.Compensation)] <- NA
salaries_max <- select(salaries_max, Total.Compensation, code = PHA.Code, receive_bonus)
hcv <- left_join(hcv, salaries_max, by = "code")
hcv <- mutate(hcv, poverty_area = tpoverty >=20)
hcv <- mutate(hcv, num_hh = total_units * (pct_occupied/100))
hcv <- mutate(hcv, num_fem = total_units * (pct_occupied/100) * (pct_female_head/100))
hcv <- mutate(hcv, num_mother = total_units * (pct_occupied/100) * (pct_female_head_child/100))
hcv <- mutate(hcv, num_male = total_units * (pct_occupied/100) * (1-(pct_female_head/100)))
hcv <- mutate(hcv, total_rent  = rent_per_month + spending_per_month)
hcv <- mutate(hcv, income_monthly  = hh_income/12)
hcv <- mutate(hcv, rent_burden  = total_rent/income_monthly)
hcv_collapse <- summaryBy(num_male+num_fem+num_mother~region,data=hcv,FUN=sum,na.rm=TRUE)
hcv_collapse <- mutate(hcv_collapse, num_nonmother  = num_fem.sum-num_mother.sum)
hcv_collapse <- select(hcv_collapse, region,num_male.sum, num_nonmother,num_mother.sum)
hcv_collapse_melt <-melt(hcv_collapse,id.var="region")
ggplot(data = hcv_collapse_melt, aes(x = reorder(region, -value), y = value,
fill = factor(variable))) + geom_bar(stat="identity") + theme_bw() + labs(x="Region")  +
ggtitle("Households Receiving Subsidized Housing\n by Region") +
scale_y_continuous(name="Count",labels=scales::comma) +
theme(legend.position="bottom",legend.direction = "horizontal", legend.title=element_blank()) +
scale_fill_manual(values=c("mediumseagreen", "lightsalmon1","orchid"),
labels=c("Headed\n by a Man", "Headed by a\n Woman, No Children","Headed by a\n Woman with Children")) +
theme(plot.title = element_text(hjust = 0.5))
hist(hcv$Total.Compensation/1000, breaks = "FD",
col=rgb(0.1,0.5,0.8,0.5), main = "Earnings of the Top-Paid Employee at\n every Public Housing Authority",
xlab = "Total Compensation (in thousands of dollars)", ylab = "Number of HCV Programs",las=1,xaxt="n",border=F,
xlim = c(0, 260), ylim=c(0,300))
axis(side=1, at=seq(0,260,10))
hist(hcv$rent_burden, breaks = "FD",
col=rgb(0.8,0.3,0.6,0.5), xlim = c(0.5, 2.5), ylim=c(0,300),
main = "Average Rent Burden",
xlab = "Ratio of Pre-Subsidy Rent to Household Monthly Income", ylab = "Number of HCV Programs",border=F)
hist(hcv$months_waiting, breaks = "FD", prob = TRUE,
ylim = c(0,.04),
col=rgb(0.2,0.8,0.5,0.5),border=F,
main="Time Spent Waiting for a Home",
xlab="Average Months",ylab="Proportion of HCV Programs",xaxt="n")
axis(side=1, at=seq(0,200,10))
a <- 1/mean(hcv$months_waiting, na.rm = TRUE)
curve(dexp(x, a), add = TRUE)
hist(hcv$months_waiting, breaks = "FD", prob = TRUE,
ylim = c(0,.04),
col=rgb(0.2,0.8,0.5,0.5),border=F,
main="Time Spent Waiting for a Home",
xlab="Average Months",ylab="Proportion of HCV Programs",xaxt="n")
axis(side=1, at=seq(0,200,10))
# add exponential distribution function
a <- 1/mean(hcv$months_waiting, na.rm = TRUE)
curve(dexp(x, a), add = TRUE)
#Topic 3: Testing the hypothesis of a continuous distribution
#Another example from Chihara and Hesterberg
#Here is a table with 100 observations, placed into four "bins."
TheData<-c(rep("0-0.25",30),rep("0.25-0.75",30),rep("0.75-1.25",22),rep("1.25-Inf",18))
Numbers=table(TheData); Numbers#top line of table, middle of p. 65 of Chihara-Hesterberg
#Since the density is falling off, the data may come from an exponential distribution.
#We can calculate the expected number in each bin by integration.
pBin1 <- integrate(dexp, 0, 0.25)$value; 100*pBin1
pBin2 <- integrate(dexp, 0.25, 0.75)$value; 100*pBin2
pBin3 <- integrate(dexp, 0.75, 1.25)$value; 100*pBin3
pBin4 <- integrate(dexp, 1.25, Inf)$value; 100*pBin4
Expected <- 100*c(pBin1,pBin2,pBin3,pBin4); Expected
#Of course, we could also get the answer from the distribution function.
100*c(pexp(0.25),pexp(0.75)-pexp(0.25),pexp(1.25)-pexp(0.75),1-pexp(1.25)); Expected
#Now we have observed and expected values and can compute the chi-square statistic.
Chi2 <-sum((Numbers-Expected)^2/Expected); Chi2
#How probable is this large a value, according the chi-square distribution?
#Since there are only three independent values, use three degrees of freedom
Pvalue<- pchisq(Chi2,3,lower.tail = FALSE); Pvalue
quantiles(hcv$months_waiting)
?quantiles
pBin1 <- integrate(dexp, 0, 20)$value; 100*pBin1
pBin2 <- integrate(dexp, 20, 40)$value; 100*pBin2
pBin3 <- integrate(dexp, 40, 60)$value; 100*pBin3
pBin4 <- integrate(dexp, 60, 80)$value; 100*pBin4
pBin5 <- integrate(dexp, 80, Inf)$value; 100*pBin5
Expected <- 100*c(pBin1,pBin2,pBin3,pBin4,pBin5); Expected
#Of course, we could also get the answer from the distribution function.
100*c(pexp(0.25),pexp(0.75)-pexp(0.25),pexp(1.25)-pexp(0.75),1-pexp(1.25)); Expected
mw_int <- hcv$months_waiting
idx <- which(is.na(mw_int))
mw_int <- mw_int[-idx]
length(mw_int)
n <- length(mw_int)
pBin1 <- integrate(dexp, 0, 20)$value; n*pBin1
pBin2 <- integrate(dexp, 20, 40)$value; n*pBin2
pBin3 <- integrate(dexp, 40, 60)$value; n*pBin3
pBin4 <- integrate(dexp, 60, 80)$value; n*pBin4
pBin5 <- integrate(dexp, 80, Inf)$value; n*pBin5
Expected <- n*c(pBin1,pBin2,pBin3,pBin4,pBin5); Expected
#Now we have observed and expected values and can compute the chi-square statistic.
Chi2 <-sum((mw_int-Expected)^2/Expected); Chi2
pBin1 <- integrate(dexp, 0, 20)$value; n*pBin1
pBin2 <- integrate(dexp, 20, 40)$value; n*pBin2
pBin3 <- integrate(dexp, 40, 60)$value; n*pBin3
pBin4 <- integrate(dexp, 60, 80)$value; n*pBin4
pBin5 <- integrate(dexp, 80, Inf)$value; n*pBin5
Expected <- n*c(pBin1,pBin2,pBin3,pBin4,pBin5); Expected
#Of course, we could also get the answer from the distribution function.
n*c(pexp(0.25),pexp(0.75)-pexp(0.25),pexp(1.25)-pexp(0.75),1-pexp(1.25)); Expected
# create histogram of average months waiting
hist(hcv$months_waiting, breaks = "FD", prob = TRUE,
col=rgb(0.2,0.8,0.5,0.5),border=F,
main="Time Spent Waiting for a Home",
xlab="Average Months",ylab="Proportion of HCV Programs",xaxt="n")
# add exponential distribution function
a <- 1/mean(hcv$months_waiting, na.rm = TRUE)
curve(dexp(x, a), add = TRUE)
# create histogram of average months waiting
hist(hcv$months_waiting, breaks = "FD", prob = TRUE,
ylim = c(0,.035),
col=rgb(0.2,0.8,0.5,0.5),border=F,
main="Time Spent Waiting for a Home",
xlab="Average Months",ylab="Proportion of HCV Programs",xaxt="n")
# add exponential distribution function
a <- 1/mean(hcv$months_waiting, na.rm = TRUE)
curve(dexp(x, a), add = TRUE)
?curve
# create histogram of average months waiting
hist(hcv$months_waiting, breaks = "FD", prob = TRUE,
ylim = c(0,.035),
col=rgb(0.2,0.8,0.5,0.5),border=F,
main="Time Spent Waiting for a Home",
xlab="Average Months",ylab="Proportion of HCV Programs",xaxt="n")
curve(dexp(x,a), from = 0, add = TRUE)
# create histogram of average months waiting
hist(hcv$months_waiting, breaks = "FD", prob = TRUE,
col=rgb(0.2,0.8,0.5,0.5),border=F,
main="Time Spent Waiting for a Home",
xlab="Average Months",ylab="Proportion of HCV Programs",xaxt="n")
axis(side=1, at=seq(0,200,10))
# add exponential distribution function
a <- 1/mean(hcv$months_waiting, na.rm = TRUE)
curve(dexp(x,a), from = 0, add = TRUE)
hist(hcv$months_waiting, breaks = "FD", prob = TRUE,
col=rgb(0.2,0.8,0.5,0.5),border=F,
main="Time Spent Waiting for a Home",
xlab="Average Months",ylab="Proportion of HCV Programs",xaxt="n")
axis(side=1, at=seq(0,200,10))
a <- 1/mean(hcv$months_waiting, na.rm = TRUE)
curve(dexp(x,a), from = 0, add = TRUE)
hist(hcv$months_waiting, breaks = "FD", prob = TRUE,
col=rgb(0.2,0.8,0.5,0.5),border=F,
main="Time Spent Waiting for a Home",
xlab="Average Months",ylab="Proportion of HCV Programs",xaxt="n")
axis(side=1, at=seq(0,200,10))
a <- 1/mean(hcv$months_waiting, na.rm = TRUE)
curve(dexp(x,a), from = 0, add = TRUE)
if (!require(reshape2)) install.packages("reshape2",dependencies=TRUE)
if (!require(doBy)) install.packages("doBy",dependencies=TRUE)
if (!require(ggplot2)) install.packages("ggplot2",dependencies=TRUE)
if (!require(dplyr)) install.packages("dplyr",dependencies=TRUE)
if (!require(noncensus)) install.packages("noncensus",dependencies=TRUE)
if (!require(tidyr)) install.packages("tidyr",dependencies=TRUE)
if (!require(knitr)) install.packages("knitr",dependencies=TRUE)
require(reshape2)
require(doBy)
require(ggplot2)
require(dplyr)
require(noncensus)
require(tidyr)
require(knitr)
attach(hcv)
hcv$mw_bin[hcv$months_waiting < 6] <- "0 to < 6 mo."
hcv$mw_bin[hcv$months_waiting >= 6  & hcv$months_waiting < 12] <- "6 to < 12 mo."
hcv$mw_bin[hcv$months_waiting >= 12  & hcv$months_waiting < 18] <- "12 to < 18 mo."
hcv$mw_bin[hcv$months_waiting >= 18  & hcv$months_waiting < 24] <- "18 to < 24 mo."
hcv$mw_bin[hcv$months_waiting >= 24  & hcv$months_waiting < 30] <- "24 to < 3 mo."
hcv$mw_bin[hcv$months_waiting >= 30  & hcv$months_waiting < 36] <- "30 to < 36 mo."
hcv$mw_bin[hcv$months_waiting >= 36] <- "36+ mo."
detach(hcv)
hcv$mw_bin <- factor(as.factor(hcv$mw_bin), levels =
c("0 to < 6 mo.", "6 to < 12 mo.", "12 to < 18 mo.",
"18 to < 24 mo.", "24 to < 3 mo.", "30 to < 36 mo.",
"36+ mo."))
pov_mo_tbl <- table(hcv$mw_bin, hcv$poverty_area)
Expected <- outer(rowSums(pov_mo_tbl), colSums(pov_mo_tbl))/sum(pov_mo_tbl)
chisq.test(hcv$mw_bin, hcv$poverty_area)
kable(pov_mo_tbl, caption = "Observed Distribution of Average Months Waiting per Poor and Non-poor Areas")
kable(Expected, caption = "Expected Distribution of Average Months Waiting per Poor and Non-poor Areas")
if (!require(reshape2)) install.packages("reshape2",dependencies=TRUE)
if (!require(doBy)) install.packages("doBy",dependencies=TRUE)
if (!require(ggplot2)) install.packages("ggplot2",dependencies=TRUE)
if (!require(dplyr)) install.packages("dplyr",dependencies=TRUE)
if (!require(noncensus)) install.packages("noncensus",dependencies=TRUE)
if (!require(tidyr)) install.packages("tidyr",dependencies=TRUE)
if (!require(knitr)) install.packages("knitr",dependencies=TRUE)
if (!require(kableExtra)) install.packages("kableExtra",dependencies=TRUE)
require(reshape2)
require(doBy)
require(ggplot2)
require(dplyr)
require(noncensus)
require(tidyr)
require(knitr)
require(kableExtra)
attach(hcv)
hcv$mw_bin[hcv$months_waiting < 6] <- "0 to < 6 mo."
hcv$mw_bin[hcv$months_waiting >= 6  & hcv$months_waiting < 12] <- "6 to < 12 mo."
hcv$mw_bin[hcv$months_waiting >= 12  & hcv$months_waiting < 18] <- "12 to < 18 mo."
hcv$mw_bin[hcv$months_waiting >= 18  & hcv$months_waiting < 24] <- "18 to < 24 mo."
hcv$mw_bin[hcv$months_waiting >= 24  & hcv$months_waiting < 30] <- "24 to < 3 mo."
hcv$mw_bin[hcv$months_waiting >= 30  & hcv$months_waiting < 36] <- "30 to < 36 mo."
hcv$mw_bin[hcv$months_waiting >= 36] <- "36+ mo."
detach(hcv)
hcv$mw_bin <- factor(as.factor(hcv$mw_bin), levels =
c("0 to < 6 mo.", "6 to < 12 mo.", "12 to < 18 mo.",
"18 to < 24 mo.", "24 to < 3 mo.", "30 to < 36 mo.",
"36+ mo."))
pov_mo_tbl <- table(hcv$mw_bin, hcv$poverty_area)
Expected <- outer(rowSums(pov_mo_tbl), colSums(pov_mo_tbl))/sum(pov_mo_tbl)
chisq.test(hcv$mw_bin, hcv$poverty_area)
kable(pov_mo_tbl, "html", caption = "Observed Distribution of Average Months Waiting per Poor and Non-poor Areas") %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F, position = "float-left")
attach(hcv)
hcv$mw_bin[hcv$months_waiting < 6] <- "0 to < 6 mo."
hcv$mw_bin[hcv$months_waiting >= 6  & hcv$months_waiting < 12] <- "6 to < 12 mo."
hcv$mw_bin[hcv$months_waiting >= 12  & hcv$months_waiting < 18] <- "12 to < 18 mo."
hcv$mw_bin[hcv$months_waiting >= 18  & hcv$months_waiting < 24] <- "18 to < 24 mo."
hcv$mw_bin[hcv$months_waiting >= 24  & hcv$months_waiting < 30] <- "24 to < 3 mo."
hcv$mw_bin[hcv$months_waiting >= 30  & hcv$months_waiting < 36] <- "30 to < 36 mo."
hcv$mw_bin[hcv$months_waiting >= 36] <- "36+ mo."
detach(hcv)
hcv$mw_bin <- factor(as.factor(hcv$mw_bin), levels =
c("0 to < 6 mo.", "6 to < 12 mo.", "12 to < 18 mo.",
"18 to < 24 mo.", "24 to < 3 mo.", "30 to < 36 mo.",
"36+ mo."))
pov_mo_tbl <- table(hcv$mw_bin, hcv$poverty_area)
Expected <- outer(rowSums(pov_mo_tbl), colSums(pov_mo_tbl))/sum(pov_mo_tbl)
chisq.test(hcv$mw_bin, hcv$poverty_area)
kable(pov_mo_tbl, "html", caption = "Observed Distribution of Average Months Waiting per Poor and Non-poor Areas") %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F, position = "float_left")
kable(Expected, "html", caption = "Expected Distribution of Average Months Waiting per Poor and Non-poor Areas") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F, position = "float_left")
attach(hcv)
hcv$mw_bin[hcv$months_waiting < 6] <- "0 to < 6 mo."
hcv$mw_bin[hcv$months_waiting >= 6  & hcv$months_waiting < 12] <- "6 to < 12 mo."
hcv$mw_bin[hcv$months_waiting >= 12  & hcv$months_waiting < 18] <- "12 to < 18 mo."
hcv$mw_bin[hcv$months_waiting >= 18  & hcv$months_waiting < 24] <- "18 to < 24 mo."
hcv$mw_bin[hcv$months_waiting >= 24  & hcv$months_waiting < 30] <- "24 to < 3 mo."
hcv$mw_bin[hcv$months_waiting >= 30  & hcv$months_waiting < 36] <- "30 to < 36 mo."
hcv$mw_bin[hcv$months_waiting >= 36] <- "36+ mo."
detach(hcv)
hcv$mw_bin <- factor(as.factor(hcv$mw_bin), levels =
c("0 to < 6 mo.", "6 to < 12 mo.", "12 to < 18 mo.",
"18 to < 24 mo.", "24 to < 3 mo.", "30 to < 36 mo.",
"36+ mo."))
pov_mo_tbl <- table(hcv$mw_bin, hcv$poverty_area)
Expected <- outer(rowSums(pov_mo_tbl), colSums(pov_mo_tbl))/sum(pov_mo_tbl)
chisq.test(hcv$mw_bin, hcv$poverty_area)$pvalue
kable(pov_mo_tbl, "html", caption = "Observed Distribution of Average Months Waiting per Poor and Non-poor Areas") %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F, position = "float_left")
kable(Expected, "html", caption = "Expected Distribution of Average Months Waiting per Poor and Non-poor Areas") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F, position = "float_left")
# Check if the difference between expected and observed is significant
chisq.test(hcv$mw_bin, hcv$poverty_area)
# Check if the difference between expected and observed is significant
chisq.test(hcv$mw_bin, hcv$poverty_area)$p-value
# Check if the difference between expected and observed is significant
chisq.test(hcv$mw_bin, hcv$poverty_area)$coeff
install.packages("apa")
library(apa)
# Check if the difference between expected and observed is significant
chisq_apa(chisq.test(hcv$mw_bin, hcv$poverty_area))
# Check if the difference between expected and observed is significant
chisq.test(hcv$mw_bin, hcv$poverty_area)
mw <- hcv$months_waiting
obs_mw <- mean(mw[PoorInd], na.rm = TRUE) - mean(mw[-PoorInd], na.rm = TRUE); obs_mw
N <- 10^5
diffs <- numeric(N)
for (i in 1:N) {
scramble <- sample(hcv$poverty_area, length(hcv$poverty_area), replace = FALSE)
index <- which(scramble)
diffs[i] <- mean(mw[index],na.rm=TRUE)-mean(mw[-index],na.rm=TRUE)
}
mean(diffs)
hist(diffs, prob = TRUE)
abline(v=obs_mw, col="red") #looks like our observed differenced falls within the distribution
pvalue <- (sum(diffs >= obs_mw)+1)/(N+1); pvalue
t.test(hcv$months_waiting ~ hcv$poverty_area)
# According to our permutation test, there's a 95% chance of the difference in mean waiting times between poor and
# non poor areas occurring by chance. However, according to the t-test, there's only a 12% chance of this occurring by
# chance. The permutation test is superior to the t-test and this difference in means is definitely not significant.
obs_mw
obs_mw$value
obs_mw
t.test$p-value
t.test(hcv$months_waiting ~ hcv$poverty_area)$p-value
t.test(hcv$months_waiting ~ hcv$poverty_area)$pvalue
t.test
t.test(hcv$months_waiting ~ hcv$poverty_area)
t_apa(t.test(hcv$months_waiting ~ hcv$poverty_area), es = "glass_delta", format = "html", info = FALSE, print = TRUE)
t_apa(t_test(hcv$months_waiting ~ hcv$poverty_area), es = "glass_delta", format = "html", info = FALSE, print = TRUE)
?t_test
t_apa(t_test(hcv$months_waiting ~ hcv$poverty_area, hcv), es = "glass_delta", format = "html", info = FALSE, print = TRUE)
t_apa(t_test(hcv$months_waiting ~ hcv$poverty_area, hcv), format = "html", info = FALSE, print = TRUE)
t.test(hcv$months_waiting ~ hcv$poverty_area)
remove.packages(tidyr)
remove.packages("tidyr")
require(tidyr)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
#NOTE TO USER: CHANGE TWO FILE PATHS (line 29 and 44) BEFORE PROCEEDING
if (!require(reshape2)) {install.packages("reshape2",dependencies=TRUE)
require(reshape2)}
if (!require(doBy)) install.packages("doBy",dependencies=TRUE)
if (!require(ggplot2)) install.packages("ggplot2",dependencies=TRUE)
if (!require(dplyr)) install.packages("dplyr",dependencies=TRUE)
if (!require(noncensus)) install.packages("noncensus",dependencies=TRUE)
if (!require(tidyr)) install.packages("tidyr",dependencies=TRUE)
if (!require(knitr)) install.packages("knitr",dependencies=TRUE)
if (!require(kableExtra)) install.packages("kableExtra",dependencies=TRUE)
if (!require(apa)) install.packages("apa",dependencies=TRUE)
install.packages(kableExtra)
require(reshape2)
require(doBy)
require(ggplot2)
require(dplyr)
require(noncensus)
require(tidyr)
require(knitr)
require(kableExtra)
require(apa)
library(kableExtra)
library(tidyr)
if (!require(tidyr)) install.packages("tidyr",dependencies=TRUE)
install.packages("reshape2")
library(reshape2)
install.packages("doBy")
library(doBy)
install.packages("ggplot2")
library(ggplot2)
install.packages("dplyr")
library(dplyr)
install.packages("noncensus")
library(noncensus)
install.packages("ggmap")
library(ggmap)
install.packages("tidyr")
library(tidyr)
install.packages("knitr")
library(knitr)
install.packages("kableExtra")
library(kableExtra)
install.packages("apa")
library(apa)
install.packages("tidyr")
?install.packages
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
#NOTE TO USER: CHANGE TWO FILE PATHS (line 29 and 44) BEFORE PROCEEDING
#install.packages("reshape2")
library(reshape2)
#install.packages("doBy")
library(doBy)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("dplyr")
library(dplyr)
#install.packages("noncensus")
library(noncensus)
#install.packages("ggmap")
library(ggmap)
install.packages("tidyr")
library(tidyr)
install.packages("knitr")
library(knitr)
install.packages("kableExtra")
